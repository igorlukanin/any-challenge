<% extend 'layouts/default.ect' %>

<div id="player" class="player">
    <div id="cards" class="player__cards"></div>
</div>

<script>
    var ws = <%- JSON.stringify(@ws, null, 2) %>;
    var challenge = <%- JSON.stringify(@challenge, null, 2) %>;
    var player = <%- JSON.stringify(@player, null, 2) %>;
    var cards = [];

    var socket = io('http://' + ws.host + ':' + ws.port + '/player', { query: 'player=' + player.id });

    socket.on('cards', function(updatedCards) {
        cards = updatedCards;

        drawPlayers();
        drawCards();
    });

    socket.on('player', function(updatedPlayer) {
        player = updatedPlayer;

        drawPlayers();
    });

//    var updateCard = function(card) {
//        for (var i in cards) {
//            if (cards[i].id == card.id) {
//                cards[i] = card;
//            }
//        }
//
//        drawPlayers();
//        drawCards();
//    };

    var fireCardAction = function(data, uri) {
        d3.xhr('/cards/' + data.id + uri)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .response(function(request) { return JSON.parse(request.responseText); })
                .post("input=" + (data.input || ''), function() {
                    window.location.reload();
                });
//                .on('load', updateCard);
    };

    var playCard = function(data) { fireCardAction(data, '/play'); };
    var flipCard = function(data) { fireCardAction(data, '/flip'); };
    var winCard = function(data) { fireCardAction(data, '/win'); };
    var looseCard = function(data) { fireCardAction(data, '/loose'); };
    var flipCardAsCompetitor = function(data) { fireCardAction(data, '/flip-as-competitor'); };
    var winCardAsCompetitor = function(data) { fireCardAction(data, '/win-as-competitor'); };
    var looseCardAsCompetitor = function(data) { fireCardAction(data, '/loose-as-competitor'); };

    var appendScore = function(button, score) {
        button.append('span')
                .classed('player__card__buttons__button__score', true)
                .text(score);
    };

    var l10n = {
        placeholders: {
            name: 'Имя и фамилия',
            phone: '8 900 000-00-00',
            cards: 'Играй и зарабатывай очки!'
        },
        labels: {
            competitor: 'Соперник',
            competitorWonOrNot: 'Соперник пока не согласился',
            competitorLostOrNot: 'Соперник пока не согласился',
            competitorWon: 'Соперник признал поражение',
            competitorLost: 'Соперник считает, что победил'
        },
        buttons: {
            play: 'Сохранить',
            win: 'Я победил',
            loose: 'Я проиграл'
        }
    };

    var drawCard = function(data) {
        var wrapper = d3.select(this);

        var card = wrapper.append('div')
                .classed('player__card', true);

        var back = card.append('div')
                .classed('player__card__back', true)
                .classed('player__card__back_1', data.scores.win == 1)
                .classed('player__card__back_2', data.scores.win == 2)
                .classed('player__card__back_3', data.scores.win == 3)
                .on('click', data.own ? flipCard : flipCardAsCompetitor);

        back.append('div')
                .classed('player__card__emoji', true)
                .classed('emoji_' + data.emoji, true);

        var front = card.append('div')
                .classed('player__card__front', true);

        front.append('div')
                .classed('player__card__name', true)
                .text(data.name);

        var rules = front.append('div')
                .classed('player__card__rules', true)
                .text(data.rules);

        if (data.type_id == 'initial_name') {
            rules.append('input')
                    .classed('player__card__input', true)
                    .attr('placeholder', l10n.placeholders.name)
                    .property('value', player.name);
        }
        else if (data.type_id == 'initial_phone') {
            rules.append('input')
                    .classed('player__card__input', true)
                    .attr('placeholder', l10n.placeholders.phone)
                    .property('value', player.phone);
        }

        if (!data.solo) {
            var competitor = front.append('div')
                    .classed('player__card__competitor', true);

            competitor.append('div')
                    .classed('player__card__competitor__note', true);

            competitor.append('a')
                    .classed('player__card__competitor__name', true)
                    .attr('target', '_blank');

            competitor.append('a')
                    .classed('player__card__competitor__phone', true)
                    .attr('target', '_blank');
        }

        var buttons = front.append('div')
                .classed('player__card__buttons', true);

        if (data.solo) {
            var soloButton = buttons.append('a')
                    .classed('player__card__buttons__button', true)
                    .classed('player__card__buttons__button_solo', true)
                    .text(l10n.buttons.play)
                    .on('click', function(data) {
                        var inputs = rules.selectAll('input');

                        if (!inputs.empty()) {
                            var value = inputs.property('value');

                            if (value && value.length > 0) {
                                data.input = value;
                            }
                        }

                        playCard(data);
                    });

            appendScore(soloButton, data.scores.play);
        }
        else {
            var winButton = buttons.append('a')
                    .classed('player__card__buttons__button', true)
                    .classed('player__card__buttons__button_win', true)
                    .text(l10n.buttons.win)
                    .on('click', data.own ? winCard : winCardAsCompetitor);

            appendScore(winButton, data.scores.win);

            var looseButton = buttons.append('a')
                    .classed('player__card__buttons__button', true)
                    .classed('player__card__buttons__button_loose', true)
                    .text(l10n.buttons.loose)
                    .on('click', data.own ? looseCard : looseCardAsCompetitor);

            appendScore(looseButton, data.scores.loose);
        }
    };

    var formatPhone = function(phone) {
        return phone.substr(0, 1) + ' ' +
                phone.substr(1, 3) + ' ' +
                phone.substr(4, 3) + '-' +
                phone.substr(7, 2) + '-' +
                phone.substr(9, 2);
    };

    var formatStaff = function(email) {
        return 'https://staff.skbkontur.ru/profile/' + email.substr(0, email.indexOf('@'));
    };

    var redrawCard = function(data) {
        var card = d3.select(this)
                .select('.player__card')
                .classed('player__card_regular', data.type == 'regular')
                .classed('player__card_flipped', data.own ? data.flipped : data.competitor_flipped)
                .classed('player__card_played', data.played);

        if (!data.solo) {
            var won = data.own ? data.won != undefined && data.won : data.competitor_won != undefined && data.competitor_won;
            var lost = data.own ? data.won != undefined && !data.won : data.competitor_won != undefined && !data.competitor_won;
            var competitorWon = data.own ? data.competitor_won != undefined && !data.competitor_won : data.won != undefined && !data.won;
            var competitorLost = data.own ? data.competitor_won != undefined && data.competitor_won : data.won != undefined && data.won;

            var competitorText = competitorWon ? l10n.labels.competitorWon :
                    competitorLost ? l10n.labels.competitorLost :
                    won ? l10n.labels.competitorWonOrNot :
                    lost ? l10n.labels.competitorLostOrNot :
                    l10n.labels.competitor;

            card.select('.player__card__competitor')
                    .classed('player__card__competitor_choice', competitorWon || competitorLost);

            card.select('.player__card__competitor__note')
                    .text(competitorText);

            card.select('.player__card__competitor__name')
                    .attr('href', formatStaff(data.own ? data.competitor.email : data.player.email))
                    .text(data.own ? (data.competitor.name || data.competitor.email.replace('@skbkontur.ru', '')) : (data.player.name || data.player.email.replace('@skbkontur.ru', '')));

            if (data.own ? data.competitor.phone != undefined : data.player.phone != undefined) {
                card.select('.player__card__competitor__phone')
                        .attr('href', 'tel:' + (data.own ? data.competitor.phone : data.player.phone))
                        .text(formatPhone(data.own ? data.competitor.phone : data.player.phone));
            }

            card.select('.player__card__buttons__button_win')
                    .classed('player__card__buttons__button_won', won)
                    .classed('player__card__buttons__button_competitor_won', competitorWon);

            card.select('.player__card__buttons__button_loose')
                    .classed('player__card__buttons__button_lost', lost)
                    .classed('player__card__buttons__button_competitor_lost', competitorLost);
        }
    };

    var drawCards = function() {
        d3.select('#cards')
                .selectAll('.player__card__wrapper')
                .data(cards, function(data) { return data.id; })
                .each(redrawCard)
            .enter()
                .append('div')
                .classed('player__card__wrapper', true)
                .each(drawCard)
                .each(redrawCard);
    };

    var calculateScoreForCard = function(card) {
        return (card.played && card.solo ? card.scores.play : 0) +
                (card.played && card.own && card.won ? card.scores.win : 0) +
                (card.played && card.own && !card.won ? card.scores.loose : 0) +
                (card.played && !card.own && card.competitor_won ? card.scores.win : 0) +
                (card.played && !card.own && !card.competitor_won ? card.scores.loose : 0);
    };

    var calculateScoreForCards = function(cards) {
        return cards.reduce(function(score, card) {
            return score + calculateScoreForCard(card);
        }, 0);
    };

    var calculatePlayedCards = function(cards) {
        return cards.reduce(function(count, card) {
            return count + (card.played ? 1 : 0);
        }, 0);
    };

    var drawPlayer = function() {
        var profile = d3.select(this);

        profile.append('span')
                .classed('player__profile__name', true);

        var numbers = profile.append('div')
                .classed('player__profile__numbers', true);

        numbers.append('div')
                .classed('player__profile__cards', true);

        numbers.append('div')
                .classed('player__profile__score', true);

        var playedCards = profile.append('div')
                .classed('player__profile__played-cards', true);

        playedCards.append('div')
                .classed('player__profile__played-cards__placeholder', true)
                .text(l10n.placeholders.cards);

        var dashboard = profile.append('div')
                .classed('player__profile__dashboard', true);

        dashboard.append('a')
                .attr('href', '/challenges/' + challenge.id + '#' + player.email)
                .attr('target', '_blank')
                .text('На каком я месте? Призы будут?');
    };

    var redrawPlayer = function() {
        var profile = d3.select(this);

        profile.select('.player__profile__name')
                .text(player.name || player.email.replace('@skbkontur.ru', ''));

        profile.select('.player__profile__score')
                .text(calculateScoreForCards(cards));

        profile.select('.player__profile__cards')
                .text(calculatePlayedCards(cards));

        var playedCards = cards.filter(function(card) {
            return card.played;
        });

        if (playedCards.length > 0) {
            var playedCardsElement = profile.select('.player__profile__played-cards');

            playedCardsElement.html("");

            playedCards.forEach(function(data) {
                var card = playedCardsElement.append('div')
                        .classed('player__profile__played-cards__card', true)
                        .classed('emoji_' + data.emoji, true);

                var text = card.append('span')
                        .classed('player__profile__played-cards__card__text', true)
                        .text(data.name);

                var score = calculateScoreForCard(data);

                if (score > 0) {
                    card.append('span')
                            .classed('player__profile__played-cards__card__score', true)
                            .text(score);
                }

                if (!data.solo) {
                    text.append('span')
                            .classed('player__profile__played-cards__card__vs', true)
                            .text('vs.');

                    text.append('span')
                            .text(data.own ? (data.competitor.name || data.competitor.email) : (data.player.name || data.player.email));
                }
            });
        }
    };

    var drawPlayers = function() {
        d3.select('#cards')
                .selectAll('.player__profile')
                .data([ player ], function(data) { return data.id; })
                .each(redrawPlayer)
            .enter()
                .append('div')
                .classed('player__profile', true)
                .each(drawPlayer)
                .each(redrawPlayer);
    };

    drawPlayers();
</script>